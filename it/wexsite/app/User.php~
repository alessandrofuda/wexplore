<?php

namespace App;

use Illuminate\Auth\Authenticatable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Auth\Passwords\CanResetPassword;
use Illuminate\Foundation\Auth\Access\Authorizable;
use Illuminate\Contracts\Auth\Authenticatable as AuthenticatableContract;
use Illuminate\Contracts\Auth\Access\Authorizable as AuthorizableContract;
use Illuminate\Contracts\Auth\CanResetPassword as CanResetPasswordContract;
use Illuminate\Database\Eloquent\SoftDeletes;

class User extends Model implements AuthenticatableContract,
                                    AuthorizableContract,
                                    CanResetPasswordContract
{
    use Authenticatable, Authorizable, CanResetPassword;

    const STATE_ACTIVE = 1;
    const STATE_INACTIVE = 0;

    const SERVICE_PROFESSIONAL_KIT = 0;
    const SERVICE_GLOBAL_TOOL_BOX = 1;
    const SERVICE_LIVE_WEBINAR = 2;
    const SERVICE_ROLE_PLAY_INTERVIEW = 3;
    const SERVICE_CONTRACT_EVALUATION = 4;
    const GT_CULTURE_SUPPORT = 5;
    const SERVICE_GT_FREELANCE_SUPPORT = 6;
    const SERVICE_GT_PROFESSIONAL = 7;

    public function checkService($id) {
        $cons_serv = ConsultantServices::where('user_id', $this->id)->where('service_id', $id)->first();

        if($cons_serv != null) {
            return $cons_serv->state_id;
        }

        return ConsultantServices::STATE_INACTIVE;
    }

    public function getCompletedSessions($type) {

        if($type == self::SERVICE_PROFESSIONAL_KIT) {
           return ConsultantBooking::join('consultant_availablities', 'consultant_availablities.id','=','consultant_bookings.availablity_id')
                                    ->where('consultant_availablities.consultant_id', $this->id)
                                    ->where('consultant_bookings.type_id', ConsultantBooking::TYPE_INTERVIEW)
                                    ->where('consultant_bookings.state_id', ConsultantBooking::STATE_COMPLETED)
                                    ->count();
        }else{
            $bookings = ConsultantBooking::join('consultant_availablities', 'consultant_availablities.id','=','consultant_bookings.availablity_id')
                ->where('consultant_availablities.consultant_id', $this->id)
                ->where('consultant_bookings.type_id', ConsultantBooking::TYPE_QUERY)
                ->where('consultant_bookings.state_id', ConsultantBooking::STATE_COMPLETED)
                ->get();
            $count = 0;

            foreach ($bookings as $booking) {
                $query = GlobalToolQuery::find($booking->query_id);

                if($query != null) {
                    if($query->question_type_id == $type)
                    ++$count;
                }

            }

            return $count;
        }

        return 0;
    }
    public function getAssignedUsers($type) {

        if($type == self::SERVICE_PROFESSIONAL_KIT) {
            return DreamCheckLab::where('validate_by', $this->id)->count();
        }

        if($type == self::SERVICE_LIVE_WEBINAR) {
            return EventBooking::join('events','event_bookings.event_id', '=', 'events.id')
                ->where('events.consultant_id', $this->id)->count();
        }

        if($type == self::SERVICE_ROLE_PLAY_INTERVIEW) {
            return GlobalToolQuery::where('consultant_id', $this->id)->where('question_type_id', GlobalToolQuery::AREA_ROLE_PLAY_INTERVIEW)->count();
        }

        if($type == self::SERVICE_CONTRACT_EVALUATION) {
            return GlobalToolQuery::where('consultant_id', $this->id)->where('question_type_id', GlobalToolQuery::AREA_CONTRACT_EVALUATION)->count();
        }

        if($type == self::GT_CULTURE_SUPPORT) {
            return GlobalToolQuery::where('consultant_id', $this->id)->where('question_type_id', GlobalToolQuery::AREA_CULTURE_SUPPORT)->count();
        }

        if($type == self::SERVICE_GT_FREELANCE_SUPPORT) {
            return GlobalToolQuery::where('consultant_id', $this->id)->where('question_type_id', GlobalToolQuery::AREA_FREELANCE_SUPPORT)->count();
        }

        if($type == self::SERVICE_GT_PROFESSIONAL) {
            return GlobalToolQuery::where('consultant_id', $this->id)->where('question_type_id', GlobalToolQuery::AREA_PROFESSIONAL_TROUBLESHOOTING)->count();
        }
        return 0;

    }


    public function getInterestedCountry($service_id) {
        $country = isset($this->userProfile->country) ? $this->userProfile->country : "--";

        if($service_id == self::SERVICE_PROFESSIONAL_KIT) {
            $order = Order::where('item_name', 'Professional Kit')
                          ->where('user_id', $this->id)->first();

            if($order != null) {

                if(isset($this->userProfile->country_interest))
                    $country = $this->userProfile->country_interest;

            }

        }

        if($service_id == self::SERVICE_GLOBAL_TOOL_BOX) {
            $order = Order::where('item_name', 'Global ToolBox')
                ->where('user_id', $this->id)->first();

            if($order != null) {
                $query = GlobalToolQuery::where('user_id', $this->id)->first();

                if($query != null) {
                    $country =  $query->country;
                }

            }

        }

        return $country;
    }

    //use SoftDeletes;
    protected $alias = 'user_alias';

    /**
     * The database table used by the model.
     *
     * @var string
     */
    protected $table = 'users';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['deleted_at','name', 'surname','email', 'password', 'is_profile_complete','tos','is_active'];

    /**
     * The attributes excluded from the model's JSON form.
     *
     * @var array
     */
    protected $hidden = ['password', 'remember_token'];
    /**
     * Get the user roles for the user.
     */
    public function userRoles()
    {
        return $this->hasMany('App\UserRoles');
    }
    /**
     * The roles that belong to the user.
     */
    public function roles()
    {
        return $this->belongsToMany('App\Role','user_roles');
    }
    public function role()
    {
        return $this->hasOne('App\UserRoles','user_id');
    }
    /**
     * Get the user roles for the user.
     */
    public function userProfile()
    {
        return $this->hasOne('App\UserProfile','user_id');
    }
    /**
     * Get the user roles for the user.
     */
    public function consultantProfile()
    {
        return $this->hasOne('App\ConsultantProfile','user_id');
    }
    /**
     * Get the consultants with same country of interest and country expertise.
     */
    public function consultantList()
    {
        return $this->hasOne('App\ConsultantProfile','user_id');
    }
    public static function getOccupationsList() {
        $list =
            [
                'Manager',
                'Professionals',
                'Technicians',
                'Clerical',
                'Service and Sales',
                'Crafts and Related Trade',
                'Plant and Machine operators'
            ];
        return $list;

    }
    public static  function getOccupationText($occupation){
        $text = '';
        if($occupation == 'Manager')  {
            $text = 'You are a Manager if you: plan, direct, coordinate and evaluate the overall activities of your organization and/or organizational units, and formulate and review their policies, laws, rules and regulations';
        }
        if($occupation == 'Professionals')  {
            $text = 'You are a Manager if you: plan, direct, coordinate and evaluate the overall activities of your organization and/or organizational units, and formulate and review their policies, laws, rules and regulations';
        }
        if($occupation == 'Technicians')  {
            $text = 'You are a Manager if you: plan, direct, coordinate and evaluate the overall activities of your organization and/or organizational units, and formulate and review their policies, laws, rules and regulations';
        }if($occupation == 'Clerical')  {
            $text = 'You are a Manager if you: plan, direct, coordinate and evaluate the overall activities of your organization and/or organizational units, and formulate and review their policies, laws, rules and regulations';
        }
        if($occupation == 'Service and Sales')  {
            $text = 'You are a Manager if you: plan, direct, coordinate and evaluate the overall activities of your organization and/or organizational units, and formulate and review their policies, laws, rules and regulations';
        }
        if($occupation == 'Crafts and Related Trade')  {
            $text = 'You are a Manager if you: plan, direct, coordinate and evaluate the overall activities of your organization and/or organizational units, and formulate and review their policies, laws, rules and regulations';
        }
        if($occupation == 'Plant and Machine operators')  {
            $text = 'You are a Manager if you: plan, direct, coordinate and evaluate the overall activities of your organization and/or organizational units, and formulate and review their policies, laws, rules and regulations';
        }
        return $text;
    }

    public static function getIndustryList() {
        $list =
            [
                'Agriculture',
                'Manufacturing',
                'Electricity',
                'Wholesale',
                'Transport',
                'ICT',
                'Financial Services',
                'Professional Services',
                'Public Administration',
                'Administrative Services',
                'Education',
                'Health',
                'Arts',
                'Other Services',
            ];
        return $list;
    }
    public static  function getIndustryText($industry){
        $text = '';
        if($industry == 'Agriculture')  {
            $text = 'Includes agriculture, foresting, fishing, mining and quarrying';
        }
        if($industry == 'Manufacturing')  {
            $text = 'Any industry involving the physical or chemical transformation of materials, substances or components into new products, either finished or semi-finished';
        }
        if($industry == 'Electricity')  {
            $text = 'Any industry involving the distribution of electricity, gas, and steam, but also waste management and construction';
        }if($industry == 'Wholesale')  {
            $text = 'Includes any wholesale or retail distribution activity, including packaging and storing, but also accommodation and food activities, and household assistance';
        }
        if($industry == 'Transport')  {
            $text = 'Passenger or freight transport, including postal and courier activities';
        }
        if($industry == 'ICT')  {
            $text = 'Any industry related to production, distribution, and processing of data and/or information';
        }
        if($industry == 'Financial Services')  {
            $text = 'Financial, insurance or real estate activities';
        }
        if($industry == 'Professional Services')  {
            $text = 'Activities requiring a high degree of training, which involves making know-how available to others. For example management consulting activities';
        }
        if($industry == 'Public Administration')  {
            $text = 'Includes governmental activities and those for international NGOs';
        }
        if($industry == 'Administrative Services')  {
            $text = 'Basic support activities to business operations, from payroll to tax accounting';
        }
        if($industry == 'Education')  {
            $text = 'Includes education at any level and for any profession, whether public or private';
        }
        if($industry == 'Health')  {
            $text = 'Healthcare activities delivered at sanitary or residential institutions';
        }
        if($industry == 'Arts')  {
            $text = 'Includes entertainment, recreation, gambling, and sports';
        }
        if($industry == 'Other Services')  {
            $text = 'Anything not fitting the descriptions above';
        }
        return $text;
    }

    public function getDocuments() {
        $docs = [];

        $dreamchecklab = DreamCheckLab::where('user_id', $this->id)->first();

        if($dreamchecklab != null) {

            if($dreamchecklab->cv_file != '') {
                $docs[] = [
                    'title' => 'Dream check Lab CV ',
                    'url' => url($dreamchecklab->cv_file)
                ];
            }

            if($dreamchecklab->form_pdf != '') {
                $docs[] = [
                    'title' => 'Dream check Lab Form',
                    'url' => url($dreamchecklab->form_pdf)
                ];
            }else{
                $base_path = base_path();
                $base_path = str_replace("/wexsite", "", $base_path);
                $pdf_path = '/uploads/dream_form_'.time().'.pdf';

                $viewdata['dream_check_lab'] = $dreamchecklab;
                $viewdata['page_title'] = 'Dream Check Lab Form';
                $pdf = \App::make('dompdf.wrapper');
                $pdf->loadView('client.dream_check_lab_pdf', $viewdata);
                $pdf->save($base_path.$pdf_path);

                $dreamchecklab->update([
                    'form_pdf' => $pdf_path
                ]);

                $docs[] = [
                    'title' => 'Dream check Lab Form ',
                    'url' => url($dreamchecklab->form_pdf)
                ];

            }

            $feedback = DreamCheckLabFeedback::where('dream_check_lab_id', $dreamchecklab->id)->first();

            if($feedback != null) {
                if($feedback->feedback_form == null) {
                    $base_path = base_path();
                    $base_path = str_replace("/wexsite", "", $base_path);
                    $pdf_path = '/uploads/dream_feedback_form_' . time() . '.pdf';

                    $viewdata['dream_check_lab_feedback'] = $feedback;
                    $viewdata['page_title'] = 'Dream check Lab Feedback Form';
                    $pdf = \App::make('dompdf.wrapper');
                    $pdf->loadView('client.dream_check_lab_feedback_pdf', $viewdata);
                    $pdf->save($base_path . $pdf_path);

                    $feedback->update([
                        'feedback_form' => $pdf_path
                    ]);
                }

                $docs[] = [
                    'title' => 'Dream check Lab Feedback Form',
                    'url' => url($feedback->feedback_form)
                ];
                if($feedback->cv_file != null) {
                    $docs[] = [
                        'title' => 'Dream check Lab CV Feedback',
                        'url' => url($feedback->cv_file)
                    ];
                }
            }
        }

        $culturematch = CultureMatchSurvey::where('user_id', $this->id)
            ->where('is_pdf_sent', CultureMatchSurvey::PDF_SENT)->first();

        if($culturematch != null) {
            $docs[] = [
                'title' => 'Culture Match Feedback Form',
                'url' => url($culturematch->pdf_path)
            ];
        }

        $global_tool_query = GlobalToolQuery::where('user_id', $this->id)
            ->whereNotNull('feedback_form')->where('feedback_form', '!=', '')->get();

        if(count($global_tool_query) > 0 ) {
            foreach ($global_tool_query as $query) {
                $docs[] = [
                    'title' => 'Global Tool Query Feedback Form',
                    'url' => url($query->feedback_form)
                ];
            }
        }

        $bookings = ConsultantBooking::where('user_id', $this->id)
            ->whereNotNull('recording')->where('recording', '!=', '')->get();

        if(count($bookings) > 0 ) {
            foreach ($bookings as $booking) {
                $docs[] = [
                    'title' => 'Gotomeeting Recording',
                    'url' => url($booking->recording)
                ];
            }
        }

        return $docs;
    }
    
    public static function exportToExcel($filename, $data) {
        $excel = \App::make('excel');
        $excel->create($filename, function($excel) use($data) {
            $excel->sheet('Sheet1', function($sheet) use($data) {

                $sheet->fromArray($data);

            });
        })->export('xls');
    }

}
